services:
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      CLUSTER_ID: CeHFQqH9TCu_JrwKL6o6hQ
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - app-net

  eureka-server:
    container_name: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - app-net

  user-mongo:
    image: mongo:6.0
    container_name: user-mongo
    ports:
      - "27017:27017"
    volumes:
      - user-mongo-data:/data/db
    networks:
      - app-net

  order-mongo:
    image: mongo:6.0
    container_name: order-mongo
    ports:
      - "27018:27017"
    volumes:
      - order-mongo-data:/data/db
    networks:
      - app-net

  user-service:
    container_name: user-service
    build: ./services/user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://user-mongo:27017/usersdb
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    depends_on:
      eureka-server:
        condition: service_healthy
      user-mongo:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - app-net

  order-service:
    container_name: order-service
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://order-mongo:27017/ordersdb
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    depends_on:
      eureka-server:
        condition: service_healthy
      order-mongo:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - app-net

  api-gateway:
    container_name: api-gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    depends_on:
      eureka-server:
        condition: service_healthy
      order-service:
        condition: service_started
      user-mongo:
        condition: service_started
    networks:
      - app-net

volumes:
  user-mongo-data:
  order-mongo-data:

networks:
  app-net:
    driver: bridge